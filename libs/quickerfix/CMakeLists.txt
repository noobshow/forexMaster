cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT CMAKE_CXX_STANDARD)
  message("-- Using compiler-default for C++ standard")
else()
  if(${CMAKE_CXX_STANDARD} STREQUAL "0x")
    set(CMAKE_CXX_STANDARD 98)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x" CACHE STRING "compile flags" FORCE)
    message("-- Using C++0x")
  else()
    if(${CMAKE_CXX_STANDARD} STREQUAL "98")
      set(CMAKE_REQUIRED_FLAGS "-std=c++98")
    elseif(${CMAKE_CXX_STANDARD} STREQUAL "11")
      set(CMAKE_REQUIRED_FLAGS "-std=c++11")
    elseif(${CMAKE_CXX_STANDARD} STREQUAL "14")
      set(CMAKE_REQUIRED_FLAGS "-std=c++14")
    elseif(${CMAKE_CXX_STANDARD} STREQUAL "17")
      set(CMAKE_REQUIRED_FLAGS "-std=c++17")
    endif()
    message("-- Using C++${CMAKE_CXX_STANDARD}")
  endif()
endif()

option(ENABLE_SSO "Build with short-string optimizations")
if(ENABLE_SSO)
  set(SSO_VALUES ON TRUE YES Y 1 2 3)
  list(FIND SSO_VALUES ${ENABLE_SSO} index)
  if(index EQUAL -1)
    message(FATAL_ERROR "allowed values are 1, 2, or 3")
  endif()
  if(index LESS 4)
    set(ENABLE_SSO 3)
  else()
    set(ENABLE_SSO ${ENABLE_SSO})
  endif()
  math(EXPR index "8 * (${ENABLE_SSO} + 1)")
  message("-- Building with short-string optimizations, ${index} byte width")
endif()

option(ENABLE_THROW_DECL "Build with method exception specifications")
if(ENABLE_THROW_DECL)
  set(ENABLE_THROW_DECL 1)
  message("-- Using method exception specifications")
endif()

option(ENABLE_DICTIONARY_FIELD_ORDER "Build with support for dictionary field order")
if(ENABLE_DICTIONARY_FIELD_ORDER)
  set(ENABLE_DICTIONARY_FIELD_ORDER 1)
  message("-- Enabling support for dictionary field order")
endif()

option(HAVE_EMX "Build with EMX")
if(HAVE_EMX)
  message("-- Building with EMX")
  set(HAVE_EMX 1)
  set (quickfix_PROJECT_NAME quickfix-emx)
else()
  set (quickfix_PROJECT_NAME quickfix)
endif()


project(${quickfix_PROJECT_NAME} VERSION 0.1 LANGUAGES CXX C)
message("-- Project name ${CMAKE_PROJECT_NAME}")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")

include(QuickfixPlatformSettings)

# Call cmake with-DHAVE_SSL=ON to compile with SSL. Similarly for others.
option(HAVE_SSL "Build with SSL")
option(HAVE_MYSQL "Build with MySQL")
option(HAVE_POSTGRESQL "Build with PostgreSQL")
option(HAVE_PYTHON "Build with default Python version")
option(HAVE_PYTHON2 "Build with default Python2 version")
option(HAVE_PYTHON3 "Build with default Python3 version")


#Make sure that a previous config.h has not undefined HAVE_SSL
if(HAVE_SSL)
  # Can set location explicitly, example, cmake -DOPENSSL_ROOT_DIR=/usr/local/ssl -DOPENSSL_LIBRARIES=/usr/local/ssl/lib
  
  find_package(OpenSSL REQUIRED)
  include_directories(${OPENSSL_INCLUDE_DIR})
  
  message("-- OPENSSL_INCLUDE_DIR: ${OPENSSL_INCLUDE_DIR}")
  message("-- OPENSSL_LIBRARIES: ${OPENSSL_LIBRARIES}")
  message("-- OPENSSL_ROOT_DIR: ${OPENSSL_ROOT_DIR}")
  
  message("-- Building with SSL")
  set(HAVE_SSL 1)
endif()

if(HAVE_MYSQL)
  find_package(MySQL REQUIRED)
  include_directories(${MYSQL_INCLUDE_DIR})
  
  message("-- Building with MySQL")
  set(HAVE_MYSQL 1)
endif()

if(HAVE_POSTGRESQL)
  find_package(PostgreSQL REQUIRED)
  include_directories(${PostgreSQL_INCLUDE_DIRS})
  
  message("-- Building with POSTGRESQL")
  set(HAVE_POSTGRESQL 1)
endif()

unset(HAVE_STD_SHARED_PTR CACHE)
unset(HAVE_SHARED_PTR_IN_TR1_NAMESPACE CACHE)
unset(HAVE_SHARED_PTR_IN_TR1_NAMESPACE_FROM_TR1_MEMORY_HEADER CACHE)
unset(HAVE_STD_TR1_SHARED_PTR CACHE)
include(FindSharedPtr)
FIND_SHARED_PTR()
if (HAVE_SHARED_PTR_IN_STD_NAMESPACE)
  message("-- Using std::shared_ptr")
  set(HAVE_STD_SHARED_PTR 1 CACHE BOOL "std::shared_ptr" FORCE)
  unset(HAVE_BOOST_SHARED_PTR)
elseif(HAVE_BOOST_SHARED_PTR)
  message("-- Using boost::shared_ptr")
  set(HAVE_BOOST_SHARED_PTR 1 CACHE BOOL "boost::shared_ptr" FORCE)
elseif(HAVE_SHARED_PTR_IN_TR1_NAMESPACE)
  message("-- Using std::tr1::shared_ptr")
  set(HAVE_STD_TR1_SHARED_PTR 1 CACHE BOOL "std::tr1::shared_ptr" FORCE)
elseif(HAVE_SHARED_PTR_IN_TR1_NAMESPACE_FROM_TR1_MEMORY_HEADER)
  message("-- Using std::tr1::shared_ptr")
  set(HAVE_STD_TR1_SHARED_PTR 1 CACHE BOOL "std::tr1::shared_ptr" FORCE)
else()
  message("-- shared_ptr not found.")
endif()

unset(HAVE_STD_UNIQUE_PTR CACHE)
include(FindUniquePtr)
FIND_UNIQUE_PTR()
if (HAVE_UNIQUE_PTR_IN_STD_NAMESPACE)
  message("-- Using std::unique_ptr")
  set(HAVE_STD_UNIQUE_PTR 1 CACHE BOOL "std::unique_ptr" FORCE)
endif()

if (HAVE_PYTHON)
  find_package(PythonLibs REQUIRED)
  include_directories(${PYTHON_INCLUDE_DIRS})
elseif (HAVE_PYTHON2)
  find_package(PythonLibs 2 REQUIRED)
  include_directories(${PYTHON_INCLUDE_DIRS})
elseif (HAVE_PYTHON3)
  find_package(PythonLibs 3 REQUIRED)
  include_directories(${PYTHON_INCLUDE_DIRS})
endif ()

if( WIN32 OR ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" )
  add_subdirectory(UnitTest++)
endif()

add_subdirectory(src)
add_subdirectory(examples)
if( WIN32)
  add_subdirectory(test)
endif()

install(DIRECTORY ${CMAKE_SOURCE_DIR}/spec/ DESTINATION share/quickfix
  FILES_MATCHING PATTERN "FIX*.xml")

configure_file(cmake/config.h.cmake config.h @ONLY)

