BUILDING AND INSTALLING

    Full instructions:
        See doc/html/building.html

    Quick instructions:
        ./bootstrap
        ./configure
        make
        make check
        sudo make install


VERSION-SPECIFIC NOTES

	Supported FIX tag value range is 1-99999999. 


SYSTEM REQUIREMENTS

    REDHAT/CENTOS 5.x and above

        Required: sudo yum install gcc-c++ automake autoconf libtool
        Optional: sudo yum install postgresql-devel ruby-develpostgresql-server
		  mysql-server mysql-client mysql-devel libxslt

    UBUNTU

        Required: sudo apt-get install g++ automake libtool 
        Optional: sudo apt-get install ruby ruby-dev libmysqlclient-dev
		  libpq-dev mysql-server postgresql xsltproc

    For SunOS and AIX have a look at README.SunOS and README.AIX.


OPTIONAL DEPENDENCIES FOR EXTRA PERFORMANCE

        Boost (www.boost.org)
        Intel Threading Building Blocks (www.threadingbuildingblocks.org)

    LINUX

        ./configure --with-boost=<path> 
           --with-tbb=<path> --with-tbb-arch=<library subdir>

        Example:

        Boost installed in /usr/local/boost
        TBB installed in /opt/intel/tbb

        ./configure --with-boost=/usr/local/boost 
               --with-tbb=/opt/intel/tbb
               --with-tbb-arch=intel64/gcc4.4

        There are two field map configuration options available

        --with-fieldmap={ avl, flat }

        Default configuration uses a custom implementation of intrusive AVL tree
        with embedded singly linked list. AVL map can be used with an additional
        option which permits a certain number of unordered fields in the outgoing
        message body.

        --with-relaxed-ordering={ 8, 16 }

        Dictionary field order support is optional and can be turned on with

        --with-field-order

        Dynamic exception specifications are on by default for the c++03 compilation
        mode and off by default for the c++11 mode and above. There is an option
        to enable or disable them explicitly.

        --with-throw-decl={ yes, no }

    WINDOWS

        Configure Boost, TBB and OpenSSL settings by changing User Macros for 
        header locations defined in VSSettings.vsprops and for architecture-specific
        library locations defined in VSSettings_x86.props for Win32 builds or 
        VSSettings_x64.props for x64 builds. This can be done inside Visual Studio 
        via Property Manager tab of the Solution Explorer or by direct editing
        of the XML property files.

        Example:

        VSSettings_x64.props

        BOOST_LIB   E:\Dev\boost_1_67_0\lib64-msvc-14.0
        TBB_LIB     E:\Dev\tbb2018_20180618oss\lib\intel64\vc14
        TBB_DEPS    tbb.lib;tbbmalloc.lib
        TBB_BIN     E:\Dev\tbb2018_20180618oss\bin\intel64\vc14
        SSL_LIB     E:\Dev\OpenSSL-Win64\lib
        SSL_DEPS    libssl.lib;libcrypto.lib;openssl.lib
        SSL_BIN     E:\Dev\OpenSSL-Win64\bin

        VSSettings.props

        BOOST_INCLUDE E:\Dev\boost_1_67_0
        TBB_INCLUDE   E:\Dev\tbb2018_20180618oss\include
        SSL_INCLUDE   E:\Dev\OpenSSL-Win32\include
        WITH_BOOST    HAVE_BOOST=1
        WITH_TBB      HAVE_TBB=1
        WITH_SSL      HAVE_SSL=1

        Then continue with the build using Debug or Release build targets
        for the selected architecture.


PLATFORM-SPECIFIC NOTES

        Use --with-sso configure option to enable short string optimization on platforms
        which use GLIBC for extra 15-20% improvement. This does not apply to g++ versions
        5.2 and above configured to support new c++11 ABI or Visual Studio compiler suite
        as string implementations shipped with them already employ this optimization.

        Recommended environment for G++ on Nehalem and above:
        CXXFLAGS="-O3 -flto -march=core2 -msse4.2 -falign-functions=16 -falign-jumps=16" or
		 "-O3 -flto -march=corei7-avx -mavx -falign-functions=16 -falign-jumps=16"
	if AVX support is available.

  
        Visual Studio builds need to use /Ox optimization level for best performance.

CMAKE
        Build can be configured with Cmake (version 3 and above). Use the following cmake
        arguments to select Boost, TBB, SSL, short-string optimization, etc support.

        -DCMAKE_BUILD_TYPE=[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL]
        -DCMAKE_CXX_STANDARD=[98|0x|11|14|17]
        -DENABLE_THROW_DECL=[ON|OFF]
        -DENABLE_SSO=[ON|OFF]
        -DHAVE_BOOST=[ON|OFF] -DBOOST_ROOT=<location>
        -DHAVE_SSL=[ON|OFF]
        -DHAVE_TBB=[ON|OFF]
        -DHAVE_EMX=[ON|OFF] -DENABLE_DICTIONARY_FIELD_ORDER=[ON|OFF]
        -DWITH_ALLOCATOR=[DEBUG|NEW|BOOST_POOL|BOOST_FAST_POOL|POOL|MT|BITMAP|TBB]
        -DHAVE_PYTHON=[ON|OFF] -DHAVE_PYTHON2=[ON|OFF] -DHAVE_PYTHON3=[ON|OFF]
        -DHAVE_MYSQL=[ON|OFF] -DHAVE_POSTGRESQL=[ON|OFF]

	Example:

        cmake -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DCMAKE_CXX_STANDARD=98
              -DENABLE_SSO=ON -DHAVE_EMX=ON -DENABLE_DICTIONARY_FIELD_ORDER=ON
              -DHAVE_BOOST=ON -DHAVE_TBB=ON -DBOOST_ROOT=<path> -DTBB_ROOT=<path>
              <build location>
   
BENCHMARKS

System: Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz, CentOS 6.6,
	running with sleep states disabled (performance-latency profile)

	g++ version: 4.8.3

Configuration:

	fix8 1.3.2	--with-tbb --with-mpmc=tbb
	Quickfix 1.13.3 --with-boost
	Quickfix 1.15.1 --with-boost --with-tbb --with-allocator=tbb --with-openssl
	quickerfix:	--with-boost --with-sso --with-tbb --with-allocator=tbb --with-openssl

	g++ options: -O3 -flto -march=corei7-avx -mavx -falign-functions=16 -falign-jumps=16

	Lockless allocator library (locklessinc.com/downloads).

CODEC:	Measures encoding and decoding performance for a NewOrderSingle message.
	examples/codec/codec.cpp

	Command line:
	LD_PRELOAD=libllalloc.so taskset -c 9 ./codec
	LD_PRELOAD=libllalloc.so taskset -c 9 ./codec ../../spec/FIX44.xml

	Results (usec per message, lower is better):

		FIX8		Quickfix 	Quickfix 	quickerfix
		1.3.2		1.13.3		1.15.1		20180707

to string	2.25516		8.17674		4.16642		0.574109
from string	7.6158		25.7686		7.21911		1.77425


PT:	Measures performance of various QuickFix subsystems
	src/pt.cpp

	Command line:
	LD_PRELOAD=libllalloc.so taskset -c 1,9 ./pt -p 1234 -c 1000000

	Results (average of 10, operations per second, higher is better):

				Quickfix 	Quickfix 	quickerfix 
				1.13.3		1.15.1		20180707

Converting integers to strings:	2.17391e+07	2.30972e+07	2.53646e+07

Converting strings to integers:	1.66667e+08	2.4e+08		3.11436e+08

Converting doubles to strings:	1.10375e+06	2.22079e+06	8.62006e+06

Converting strings to doubles:	4.6729e+06	1.22004e+07	8.09943e+07

Creating Heartbeat messages:	1.00604e+06	1.61747e+06	3.96268e+06

Identifying message types:	6.99301e+06	7.66758e+06	3.93613e+07

Serializing Heartbeat messages
to strings:			847458		1.64637e+06	3.97154e+06

Serializing Heartbeat messages
from strings:			392003		813028		3.12694e+06

Serializing Heartbeat messages
from strings and validation:	-		747152		2.80835e+06

Creating NewOrderSingle
messages:			331785		479870		1.58797e+06
 (packed):			-		-		1.87967e+06

Serializing NewOrderSingle
messages to strings:		652316		1.31906e+06	3.0911e+06

Serializing NewOrderSingle
messages from strings:		152346		376396		1.61002e+06

Serializing NewOrderSingle
messages from strings
and validation:			-		358043		1.44286e+06

Creating QuoteRequest
messages:			13621.9		19086.8		57238.8
 (packed):			-		-		80652.9
 (packed, in place):		-		-		137421

Serializing QuoteRequest
messages to strings:		174490		359842		690248

Serializing QuoteRequest
messages from strings:		16942.8		59188.7		137230

Serializing QuoteRequest
messages from strings
and validation:			-		56900.8		121872

Reading fields
from QuoteRequest message:	28681.2		127245		126140

Storing NewOrderSingle
messages:			299670		267331		315999

Validating NewOrderSingle
messages without
data dictionary:		5.64972e+06	1.11361e+07	1.3122e+07

Validating NewOrderSingle
messages with data dictionary:	345901		508688		1.6907e+06

Validating QuoteRequest
messages without
data dictionary:		9.80392e+06	1.7987e+07	1.858e+07

Validating QuoteRequest
messages with data dictionary:	478240		693746		1.63869e+06

Sending/Receiving
NewOrderSingle/ExecutionReports
on Socket			59883.8		104712		357246
(low latency profile)		-		106351		358088

Sending/Receiving
NewOrderSingle/ExecutionReport
on ThreadedSocket		59862.3		107162		470316
(low latency profile)		-		110967		493098

Sending/Receiving
NewOrderSingle/ExecutionReports
on Socket with data dictionary	-		80872.2		331382
(low latency profile)		-		81855.7		358237

Sending/Receiving
NewOrderSingle/ExecutionReports
on ThreadedSocket
with data dictionary		-		82162.3		326672
(low latency profile)		-		83803.6		485255

Sending/Receiving
NewOrderSingle/ExecutionReports
on ThreadedSSLSocket		-		61060.4		107134
with data dictionary		-		50959.2		90730.9

