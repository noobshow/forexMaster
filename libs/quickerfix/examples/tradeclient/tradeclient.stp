#! /usr/bin/env stap

global send_enter, send_enter_ns, app_enter, tx_enter, recv_enter, sn_enter, sz_enter,
       sstats, nsstats, ssstats, tstats, rstats, szstats, astats

probe process(".libs/lt-tradeclient").mark("send-start")
{
  send_enter_ns = local_clock_ns();
  send_enter = get_cycles();
}
probe process(".libs/lt-tradeclient").mark("send-end")
{
  nsstats <<< local_clock_ns() - send_enter_ns;
  sstats <<< get_cycles() - send_enter;
}

/* internal probes along tx pipeline
probe process(".libs/lt-tradeclient").library("libquickfix.so.16").provider("quickfix").mark("session-send-start")
{
  sn_enter = get_cycles();
}
probe process(".libs/lt-tradeclient").library("libquickfix.so.16").provider("quickfix").mark("session-send-end")
{
  ssstats <<< get_cycles() - sn_enter;
}

probe process(".libs/lt-tradeclient").library("libquickfix.so.16").provider("quickfix").mark("to-app-start")
{
  app_enter = get_cycles();
}
probe process(".libs/lt-tradeclient").library("libquickfix.so.16").provider("quickfix").mark("to-app-end")
{
  astats <<< get_cycles() - app_enter;
}

probe process(".libs/lt-tradeclient").library("libquickfix.so.16").provider("quickfix").mark("sg-serialize-start")
{
  sz_enter = get_cycles();
}
probe process(".libs/lt-tradeclient").library("libquickfix.so.16").provider("quickfix").mark("sg-serialize-end")
{
  szstats <<< get_cycles() - sz_enter;
}

probe process(".libs/lt-tradeclient").library("libquickfix.so.16").provider("quickfix").mark("threaded-socket-tx-start")
{
  tx_enter = get_cycles();
}
probe process(".libs/lt-tradeclient").library("libquickfix.so.16").provider("quickfix").mark("threaded-socket-tx-end")
{
  tstats <<< get_cycles() - tx_enter;
}
*/
probe process(".libs/lt-tradeclient").library("libquickfix.so.16").provider("quickfix").mark("threaded-socket-receive-start")
{
  recv_enter = get_cycles();
}
probe process(".libs/lt-tradeclient").library("libquickfix.so.16").provider("quickfix").mark("threaded-socket-receive-end")
{
  rstats <<< get_cycles() - recv_enter;
}

probe end
{
  if (send_enter > 0)
  {
    printf("Distribution of cycle latencies for %d message sends\n", @count(sstats));
    printf("max(ns)/avg(ns)/min(ns): %d(%d)/%d(%d)/%d(%d)\n",
           @max(sstats), @max(nsstats), @avg(sstats), @avg(nsstats), @min(sstats), @min(nsstats));
    print(@hist_log(sstats));
  }
  if (sn_enter > 0)
  {
    printf("Distribution of cycle latencies for %d session sends\n", @count(ssstats));
    printf("max/avg/min: %d/%d/%d\n", @max(ssstats), @avg(ssstats), @min(ssstats));
    print(@hist_log(ssstats));
  }
  if (app_enter > 0)
  {
    printf("Distribution of cycle latencies for %d toApp calls\n", @count(astats));
    printf("max/avg/min: %d/%d/%d\n", @max(astats), @avg(astats), @min(astats));
    print(@hist_log(astats));
  }
  if (sz_enter > 0)
  {
    printf("Distribution of cycle latencies for %d send serializations\n", @count(szstats));
    printf("max/avg/min: %d/%d/%d\n", @max(szstats), @avg(szstats), @min(szstats));
    print(@hist_log(szstats));
  }
  if (tx_enter > 0)
  {
    printf("Distribution of cycle latencies for %d sends on socket\n", @count(tstats));
    printf("max/avg/min: %d/%d/%d\n", @max(tstats), @avg(tstats), @min(tstats));
    print(@hist_log(tstats));
  }
  if (recv_enter > 0)
  {
    printf("Distribution of cycle latencies for %d receives\n", @count(rstats));
    printf("max/avg/min: %d/%d/%d\n", @max(rstats), @avg(rstats), @min(rstats));
    print(@hist_log(rstats));
  }
}

