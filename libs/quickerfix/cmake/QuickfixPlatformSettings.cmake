#AIX do something like
#export OBJECT_MODE=64
#mkdir build
#cd build
#CC=xlc_r CXX=xlC_r cmake .. -DHAVE_SSL=ON -DCMAKE_INSTALL_PREFIX:PATH=install-path
if( ${CMAKE_SYSTEM_NAME} STREQUAL "AIX" )
add_compile_options(-q64 -qthreaded)
add_definitions(-D_THREAD_SAFE=1 -D__IBMCPP_TR1__=1)
endif()

#SunOS can do something like
#CC=cc CXX=CC cmake .. -DHAVE_SSL=ON -DCMAKE_INSTALL_PREFIX:PATH=install-path -DOPENSSL_ROOT_DIR=path -DOPENSSL_LIBRARIES=path
#If the linker complains about not finding ssl libs, try setting the LD_LIBRARY_PATH.
if( ${CMAKE_SYSTEM_NAME} STREQUAL "SunOS" )
add_compile_options(-m64)
set( CMAKE_EXE_LINKER_FLAGS "-m64 -lrt" CACHE STRING "Executable link flags" FORCE )
set( CMAKE_SHARED_LINKER_FLAGS "-m64 -lrt" CACHE STRING "shared link flags" FORCE )
endif()

if(NOT WIN32)
find_file (FOUND_ALLOCATOR_HDR NAMES Allocator.h PATHS ${CMAKE_SOURCE_DIR}/src/C++/ NO_DEFAULT_PATH)
if (NOT FOUND_ALLOCATOR_HDR)
message("-- Generating empty Allocator.h")
file(WRITE ${CMAKE_SOURCE_DIR}/src/C++/Allocator.h 
     "/* Empty file generated by cmake, can be replaced by a custom file */\n"
 )
endif()

find_file (FOUND_CONFIG_HDR NAMES config.h PATHS ${CMAKE_SOURCE_DIR} NO_DEFAULT_PATH)
if (NOT FOUND_CONFIG_HDR)
message("-- Generating empty config.h")
file(WRITE ${CMAKE_SOURCE_DIR}/config.h 
     "/* Empty file generated by cmake, can be replaced by a custom file */\n" )
endif()
endif()


include (CheckIncludeFiles)
include(CheckFunctionExists)
include(CheckPrototypeDefinition)
include(CheckIncludeFileCXX)
include(CheckCXXSourceCompiles)
include(CheckSymbolExists)

unset(__MACH__ CACHE)
if(APPLE)
  set(__MACH__	1)
endif()

unset(HAVE_BOOST_SHARED_PTR CACHE)
if(HAVE_BOOST)
  unset(HAVE_BOOST CACHE)
  find_package(Boost REQUIRED)
  if (Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
    link_directories(${Boost_LIBRARY_DIRS})
    set(HAVE_BOOST 1)
    set(HAVE_BOOST_SHARED_PTR TRUE)
  else()
    message("-- unable to find Boost")
  endif()
endif() #HAVE_BOOST


if(HAVE_TBB)
  unset(HAVE_TBB CACHE)
  find_package(TBB REQUIRED COMPONENTS tbbmalloc)
  if (TBB_FOUND)
    include_directories(${TBB_INCLUDE_DIRS})
    set(HAVE_TBB 1)
    message("-- using Thread Building Blocks")
  else()
    message("-- unable to find Thread Building Blocks")
  endif()
endif() #HAVE_TBB


unset(ENABLE_DEBUG_ALLOCATOR CACHE)
unset(ENABLE_NEW_ALLOCATOR CACHE)
unset(ENABLE_BOOST_POOL_ALLOCATOR CACHE)
unset(ENABLE_BOOST_FAST_POOL_ALLOCATOR CACHE)
unset(ENABLE_MT_ALLOCATOR CACHE)
unset(ENABLE_POOL_ALLOCATOR CACHE)
unset(ENABLE_BITMAP_ALLOCATOR CACHE)
unset(ENABLE_TBB_ALLOCATOR CACHE)
unset(ALLOCATOR_RESULT CACHE)
option(WITH_ALLOCATOR "Use a specific allocator")
if(WITH_ALLOCATOR)
  string( TOLOWER "${WITH_ALLOCATOR}" LC_VALUE)
  message("-- testing if ${WITH_ALLOCATOR} allocator works...")
  if(${LC_VALUE} STREQUAL "debug")
    CHECK_CXX_SOURCE_COMPILES("#include <ext/debug_allocator.h>
                               #include<vector>
                               int main() { std::vector<int, __gnu_cxx::debug_allocator<int> > x; return 0; }" ALLOCATOR_RESULT)
    if(ALLOCATOR_RESULT)
      message("--   enabling debug allocator")
      set(ENABLE_DEBUG_ALLOCATOR 1)
    else()
      message("--   debug allocator cannot be used")
    endif()
  elseif(${LC_VALUE} STREQUAL "new")
    CHECK_CXX_SOURCE_COMPILES("#include <ext/new_allocator.h>
                               #include<vector>
                               int main() { std::vector<int, __gnu_cxx::new_allocator<int> > x; return 0; }" ALLOCATOR_RESULT)
    if(ALLOCATOR_RESULT)
      message("--   enabling new allocator")
      set(ENABLE_NEW_ALLOCATOR 1)
    else()
      message("--   new allocator cannot be used")
    endif()
  elseif(${LC_VALUE} STREQUAL "boost")
    if(HAVE_BOOST)
      set(CMAKE_REQUIRED_INCLUDES ${Boost_INCLUDE_DIRS})
      set(CMAKE_REQUIRED_LIBRARIES ${Boost_LIBRARIES})
      CHECK_CXX_SOURCE_COMPILES("#include  <boost/pool/pool_alloc.hpp>
                                 #include<vector>
                                 int main() { std::vector<int, boost::pool_allocator<int> > x; return 0; }" ALLOCATOR_RESULT)
      if(ALLOCATOR_RESULT)
        message("--   enabling Boost pool allocator")
        set(ENABLE_BOOST_POOL_ALLOCATOR 1)
      else()
        message("--   Boost pool allocator cannot be used")
      endif()
    else()
      message(FATAL_ERROR "--   Boost pool allocator requires HAVE_BOOST")
    endif()
  elseif(${LC_VALUE} STREQUAL "boost_fast")
    if(HAVE_BOOST)
      set(CMAKE_REQUIRED_INCLUDES ${Boost_INCLUDE_DIRS})
      set(CMAKE_REQUIRED_LIBRARIES ${Boost_LIBRARIES})
      CHECK_CXX_SOURCE_COMPILES("#include  <boost/pool/pool_alloc.hpp>
                                 #include<vector>
                                 int main() { std::vector<int, boost::fast_pool_allocator<int> > x; return 0; }" ALLOCATOR_RESULT)
      if(ALLOCATOR_RESULT)
        message("--   enabling Boost fast pool allocator")
        set(ENABLE_BOOST_FAST_POOL_ALLOCATOR 1)
      else()
        message("--   Boost fast pool allocator cannot be used")
      endif()
    else()
      message(FATAL_ERROR "--   Boost fast pool allocator requires HAVE_BOOST")
    endif()
  elseif(${LC_VALUE} STREQUAL "pool")
    CHECK_CXX_SOURCE_COMPILES("#include <ext/pool_allocator.h>
                               #include<vector>
                               int main() { std::vector<int, __gnu_cxx::__pool_alloc<int> > x; return 0; }" ALLOCATOR_RESULT)
    if(ALLOCATOR_RESULT)
      message("--   enabling pool allocator")
      set(ENABLE_POOL_ALLOCATOR 1)
    else()
      message("--   pool allocator cannot be used")
    endif()
  elseif(${LC_VALUE} STREQUAL "mt")
    CHECK_CXX_SOURCE_COMPILES("#include <ext/mt_allocator.h>
                               #include<vector>
                               int main() { std::vector<int, __gnu_cxx::__mt_alloc<int> > x; return 0; }" ALLOCATOR_RESULT)
    if(ALLOCATOR_RESULT)
      message("--   enabling mt allocator")
      set(ENABLE_MT_ALLOCATOR 1)
    else()
      message("--   mt allocator cannot be used")
    endif()
  elseif(${LC_VALUE} STREQUAL "bitmap")
    CHECK_CXX_SOURCE_COMPILES("#include <ext/bitmap_allocator.h>
                               #include<vector>
                               int main() { std::vector<int, __gnu_cxx::bitmap_allocator<int> > x; return 0; }" ALLOCATOR_RESULT)
    if(ALLOCATOR_RESULT)
      message("--   enabling bitmap allocator")
      set(ENABLE_BITMAP_ALLOCATOR 1)
    else()
      message("--   bitmap allocator cannot be used")
    endif()
  elseif(${LC_VALUE} STREQUAL "tbb")
    if(HAVE_TBB)
      set(CMAKE_REQUIRED_INCLUDES ${TBB_INCLUDE_DIRS})
      set(CMAKE_REQUIRED_LIBRARIES ${TBB_LIBRARIES})
      CHECK_CXX_SOURCE_COMPILES("#include <tbb/scalable_allocator.h>
                                 #include<vector>
                                 int main() { std::vector<int, tbb::scalable_allocator<int> > x; return 0; }" ALLOCATOR_RESULT)
      if(ALLOCATOR_RESULT)
        message("--   enabling TBB allocator")
        set(ENABLE_TBB_ALLOCATOR 1)
      else()
        message("--   TBB allocator cannot be used")
      endif()
    else()
      message(FATAL_ERROR "TBB allocator requires HAVE_TBB")
    endif()
  else()
  endif()
endif()

if(NOT WIN32)

  unset(HAVE_DLFCN_H CACHE)
  CHECK_INCLUDE_FILES(dlfcn.h HAVE_DLFCN_H)
  unset(HAVE_INTTYPES_H CACHE)
  CHECK_INCLUDE_FILES(inttypes.h HAVE_INTTYPES_H)
  unset(HAVE_STDINT_H CACHE)
  CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
  unset(HAVE_STDIO_H CACHE)
  CHECK_INCLUDE_FILES(stdio.h HAVE_STDIO_H)
  unset(HAVE_STDLIB_H CACHE)
  CHECK_INCLUDE_FILES(stdlib.h HAVE_STDLIB_H)
  unset(HAVE_STRINGS_H CACHE)
  CHECK_INCLUDE_FILES(strings.h HAVE_STRINGS_H)
  unset(HAVE_STRING_H CACHE)
  CHECK_INCLUDE_FILES(string.h HAVE_STRING_H)
  unset(HAVE_SYS_STAT_H CACHE)
  CHECK_INCLUDE_FILES(sys/stat.h HAVE_SYS_STAT_H)
  unset(HAVE_SYS_TYPES_H CACHE)
  CHECK_INCLUDE_FILES(sys/types.h HAVE_SYS_TYPES_H)
  unset(HAVE_UNISTD_H CACHE)
  CHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)
  
  unset(HAVE_GETTIMEOFDAY CACHE)
  CHECK_SYMBOL_EXISTS(gettimeofday sys/time.h HAVE_GETTIMEOFDAY)
  
  #https://github.com/transmission/libevent/blob/master/CMakeLists.txt
  unset(HAVE_GETHOSTBYNAME_R CACHE)
  unset(HAVE_GETHOSTBYNAME_R_3_ARG CACHE)
  unset(HAVE_GETHOSTBYNAME_R_5_ARG CACHE)
  unset(HAVE_GETHOSTBYNAME_R_6_ARG CACHE)
  CHECK_FUNCTION_EXISTS(gethostbyname_r HAVE_GETHOSTBYNAME_R)
  if (HAVE_GETHOSTBYNAME_R)
      CHECK_PROTOTYPE_DEFINITION(gethostbyname_r
          "int gethostbyname_r(const char *name, struct hostent *hp, struct hostent_data *hdata)"
          "0"
          "netdb.h"
          HAVE_GETHOSTBYNAME_R_3_ARG)
  
      CHECK_PROTOTYPE_DEFINITION(gethostbyname_r
          "struct hostent *gethostbyname_r(const char *name, struct hostent *hp, char *buf, size_t buflen, int *herr)"
          "NULL"
          "netdb.h"
          HAVE_GETHOSTBYNAME_R_5_ARG)
  
      CHECK_PROTOTYPE_DEFINITION(gethostbyname_r
          "int gethostbyname_r(const char *name, struct hostent *hp, char *buf, size_t buflen, struct hostent **result, int *herr)"
          "0"
          "netdb.h"
          HAVE_GETHOSTBYNAME_R_6_ARG)
  
      if (HAVE_GETHOSTBYNAME_R_5_ARG)
        set(GETHOSTBYNAME_R_RETURNS_RESULT 1)
      endif()
  
      if (HAVE_GETHOSTBYNAME_R_6_ARG)
        set(GETHOSTBYNAME_R_INPUTS_RESULT 1)
      endif()
  endif()

  include(CheckLibraryExists)
  unset(HAVE_CLOCK_GETTIME CACHE)
  CHECK_LIBRARY_EXISTS(rt clock_gettime "time.h" HAVE_CLOCK_GETTIME)

  if (HAVE_CLOCK_GETTIME)
    set(RT_LIBS rt)
  else()
    set(CMAKE_EXTRA_INCLUDE_FILES time.h)
    CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)
    set(CMAKE_EXTRA_INCLUDE_FILES)
  endif()

  unset(USING_STREAMS CACHE)
  CHECK_CXX_SOURCE_COMPILES("#include <sys/types.h>
                             #include <stropts.h>
                             #include <sys/conf.h>
                             int main() { ioctl(1,I_NREAD); return 0; }" USING_STREAMS)
  if(USING_STREAMS)
    message("-- Using AT&T STREAMS ${CMAKE_REQUIRED_INCLUDES}")
    set(USING_STREAMS 1)
  endif()

  unset(SOCKLEN_RESULT CACHE)
  CHECK_CXX_SOURCE_COMPILES("#include <unistd.h>
                             #include <sys/types.h>
                             #include <sys/socket.h>
                             int main() { socklen_t t = 1; return 0; }" SOCKLEN_RESULT)
  if(SOCKLEN_RESULT)
    message("-- Found socklen_t")
  else()
    message("-- Defining socklen_t")
    set(socklen_t "int")
  endif()

  unset(HAVE_FTIME CACHE)
  CHECK_CXX_SOURCE_COMPILES("#include <sys/timeb.h>
                             timeb tb;
                             int main() { ftime(&tb); return 0; }" HAVE_FTIME)
  if(HAVE_FTIME)
    message("-- Found ftime")
    set(HAVE_FTIME 1)
  endif()

  unset(SELECT_RUN_RESULT CACHE)
  unset(SELECT_CXX_RESULT CACHE)
  TRY_RUN(SELECT_RUN_RESULT SELECT_CXX_RESULT /tmp ${CMAKE_SOURCE_DIR}/cmake/test/select.cc)
  if (SELECT_CXX_RESULT)
    if (SELECT_RUN_RESULT EQUAL 0)
      message("-- Found that select modifies timeval")
      set(SELECT_MODIFIES_TIMEVAL 1)
    endif()
  endif()
endif()
